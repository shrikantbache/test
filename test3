import json
import os
from datetime import datetime
from bs4 import BeautifulSoup
from jinja2 import Environment, FileSystemLoader

# Define paths to old and new reports (update these paths accordingly)
old_report_path = "reports/old_report.html"
new_report_path = "reports/new_report.html"

def extract_test_data(report_path):
    """Extracts test data from a pytest-html report."""
    if not os.path.exists(report_path):
        print(f"Error: Report file {report_path} does not exist.")
        return {}

    with open(report_path, "r", encoding="utf-8") as file:
        soup = BeautifulSoup(file, "html.parser")

    # Locate the JSON test data within the <div id="data-container">
    data_container = soup.find("div", {"id": "data-container"})
    if not data_container:
        print(f"Error: No test data found in {report_path}")
        return {}

    test_data = json.loads(data_container["data-jsonblob"])["tests"]

    parsed_tests = {}
    for test_name, test_entries in test_data.items():
        test_info = test_entries[0]  # Get the latest test entry
        parsed_tests[test_name] = {
            "status": test_info["result"].lower(),
            "time": float(test_info["duration"].replace(" ms", "")) / 1000,  # Convert ms to seconds
            "logs": test_info.get("log", "No logs available")
        }

    return parsed_tests






# Extract test details from both reports
old_tests = extract_test_data(old_report_path)
new_tests = extract_test_data(new_report_path)

comparison_results = {
    "old_report": old_report_path,
    "new_report": new_report_path,
    "new_tests": [],
    "failed_tests": [],
    "time_differences": [],
}

# Identify new test cases
for test_name in new_tests:
    if test_name not in old_tests:
        comparison_results["new_tests"].append(test_name)

# Identify failed test cases
for test_name, new_data in new_tests.items():
    if new_data["status"] == "failed":
        old_status = old_tests.get(test_name, {}).get("status", "not present")
        comparison_results["failed_tests"].append({
            "test": test_name,
            "old_status": old_status,
            "new_status": "failed",
            "old_logs": old_tests.get(test_name, {}).get("logs", "No logs"),
            "new_logs": new_data["logs"]
        })

# Identify test cases that took longer
for test_name, new_data in new_tests.items():
    if test_name in old_tests:
        old_time = old_tests[test_name]["time"]
        new_time = new_data["time"]
        time_diff = new_time - old_time
        if time_diff > 0:
            comparison_results["time_differences"].append({
                "test": test_name,
                "old_time": old_time,
                "new_time": new_time,
                "increase": time_diff
            })


# Load Jinja2 template
env = Environment(loader=FileSystemLoader('.'))
template = env.get_template("comparison_template.html")

# Render template with data
comparison_html = template.render(
    old_report=old_report_path,
    new_report=new_report_path,
    new_tests=comparison_results["new_tests"],
    failed_tests=comparison_results["failed_tests"],
    time_differences=comparison_results["time_differences"]
)

# Save the comparison report
comparison_report_path = f"reports/comparison_{datetime.now().strftime('%Y-%m-%d')}.html"
with open(comparison_report_path, "w", encoding="utf-8") as f:
    f.write(comparison_html)

print(f"Comparison report saved to {comparison_report_path}")

