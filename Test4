Here is the structured table:  

| Income Range | A       | B       | C       | D       |
|-------------|--------|--------|--------|--------|
| 15-25k     | 25,000  | 18,750  | 18,750  | 12,500  |
| 25-35k     | 37,500  | 25,000  | 18,750  | 12,500  |
| 35-50k     | 62,500  | 50,000  | 37,500  | 25,000  |
| 50-75k     | 87,500  | 62,500  | 50,000  | 37,500  |
| 75k-1L     | 112,500 | 87,500  | 62,500  | 50,000  |
| >1L        | 125,000 | 112,500 | 87,500  | 62,500  |

Would you like this in CSV or JSON format?







Here is the corrected table:  

| App Score | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|-----------|---------------------|----------------|---------------------|
| A         | 20,000              | 12,000         | 20,000              |
| B         | 15,000              | 9,000          | 15,000              |
| C         | 12,500              | 10,000         | 12,500              |
| D         | N/A                 | N/A            | N/A                 |

Let me know if you need any modifications or format conversions!









from marshmallow import Schema, fields, validate, ValidationError, EXCLUDE, post_load
import re

# Custom validator to allow only alphanumeric characters and spaces
def no_special_chars(value):
    if not re.match(r"^[a-zA-Z0-9 ]*$", value):
        raise ValidationError("Special characters are not allowed.")

class CustomSchema(Schema):
    class Meta:
        unknown = EXCLUDE  # Ignore unknown fields, but we validate them manually

    # Apply validation to certain known fields
    name = fields.Str(required=True, validate=no_special_chars)
    age = fields.Int(required=True, validate=validate.Range(min=18, max=100))
    email = fields.Email(required=True)  # No special char validation needed for email
    country = fields.Str(required=True, validate=no_special_chars)

    # Validate all unknown fields dynamically
    @post_load
    def validate_unknown_fields(self, data, **kwargs):
        for key, value in self.context.get("raw_data", {}).items():
            if key not in self.fields:  # Only validate unknown fields
                if isinstance(value, str) and not re.match(r"^[a-zA-Z0-9 ]*$", value):
                    raise ValidationError({key: ["Special characters are not allowed."]})
        return data

# Example input data with an unknown field
user_data = {
    "name": "JohnDoe",
    "age": 25,
    "email": "john@example.com",
    "country": "US",
    "nickname": "Johnny!",  # This unknown field should trigger a validation error
    "city": "New York"  # This should pass
}

try:
    schema = CustomSchema()
    schema.context["raw_data"] = user_data  # Store raw input data for unknown field validation
    validated_data = schema.load(user_data)
    print("Validated Data:", validated_data)
except ValidationError as err:
    print("Validation Errors:", err.messages)

