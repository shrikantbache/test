Here’s your data in a structured tabular format:  

| Sanction Amount Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|----------------------|----------|---------------------|----------------|-------------------|
| 50k - 1L           | A        | 40,000              | 20,000         | 40,000           |
| 1 - 1.5L           | A        | 45,000              | 22,000         | 45,000           |
| >1.5L              | A        | 50,000              | 25,000         | 50,000           |
| 50k - 1L           | B        | 30,000              | 15,000         | 30,000           |
| 1 - 1.5L           | B        | 35,000              | 18,000         | 35,000           |
| >1.5L              | B        | 40,000              | 20,000         | 40,000           |
| 50k - 1L           | C        | 20,000              | 10,000         | 20,000           |
| 1 - 1.5L           | C        | 25,000              | 12,000         | 25,000           |
| >1.5L              | C        | 30,000              | 15,000         | 30,000           |
| 50k - 1L           | D        | 15,000              | 8,000          | 15,000           |
| 1 - 1.5L           | D        | 15,000              | 8,000          | 15,000           |
| >1.5L              | D        | 20,000              | 10,000         | 20,000           |

Would you like this in CSV or JSON format for easier use in a program?


def get_eligibility(category, sanction_amount):
    # Eligibility dataset
    eligibility_data = [
        {"Sanction Amount Range": "50k - 1L", "Category": "A", "Overall Eligibility": 40000, "OTC-Eligibility": 20000, "Non-OTC Eligibility": 40000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "A", "Overall Eligibility": 45000, "OTC-Eligibility": 22000, "Non-OTC Eligibility": 45000},
        {"Sanction Amount Range": ">1.5L", "Category": "A", "Overall Eligibility": 50000, "OTC-Eligibility": 25000, "Non-OTC Eligibility": 50000},
        {"Sanction Amount Range": "50k - 1L", "Category": "B", "Overall Eligibility": 30000, "OTC-Eligibility": 15000, "Non-OTC Eligibility": 30000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "B", "Overall Eligibility": 35000, "OTC-Eligibility": 18000, "Non-OTC Eligibility": 35000},
        {"Sanction Amount Range": ">1.5L", "Category": "B", "Overall Eligibility": 40000, "OTC-Eligibility": 20000, "Non-OTC Eligibility": 40000},
        {"Sanction Amount Range": "50k - 1L", "Category": "C", "Overall Eligibility": 20000, "OTC-Eligibility": 10000, "Non-OTC Eligibility": 20000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "C", "Overall Eligibility": 25000, "OTC-Eligibility": 12000, "Non-OTC Eligibility": 25000},
        {"Sanction Amount Range": ">1.5L", "Category": "C", "Overall Eligibility": 30000, "OTC-Eligibility": 15000, "Non-OTC Eligibility": 30000},
        {"Sanction Amount Range": "50k - 1L", "Category": "D", "Overall Eligibility": 15000, "OTC-Eligibility": 8000, "Non-OTC Eligibility": 15000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "D", "Overall Eligibility": 15000, "OTC-Eligibility": 8000, "Non-OTC Eligibility": 15000},
        {"Sanction Amount Range": ">1.5L", "Category": "D", "Overall Eligibility": 20000, "OTC-Eligibility": 10000, "Non-OTC Eligibility": 20000},
    ]

    # Determine the sanction amount range
    if 50000 <= sanction_amount <= 100000:
        sa_range = "50k - 1L"
    elif 100001 <= sanction_amount <= 150000:
        sa_range = "1 - 1.5L"
    else:
        sa_range = ">1.5L"

    # Find the matching entry
    for entry in eligibility_data:
        if entry["Category"] == category and entry["Sanction Amount Range"] == sa_range:
            return entry

    return None  # Return None if no match found

# Example usage
category = "B"
sanction_amount = 130000
eligibility = get_eligibility(category, sanction_amount)

if eligibility:
    print("Eligibility Details:", eligibility)
else:
    print("No matching eligibility found.")






Here’s your data in a structured tabular format:

| Sanction Amount Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|----------------------|----------|---------------------|----------------|-------------------|
| 50k - 1L           | A        | 20,000              | 20,000         | 20,000           |
| 1 - 1.5L           | A        | 22,000              | 22,000         | 22,000           |
| >1.5L              | A        | 25,000              | 25,000         | 25,000           |
| 50k - 1L           | B        | 15,000              | 15,000         | 15,000           |
| 1 - 1.5L           | B        | 18,000              | 18,000         | 18,000           |
| >1.5L              | B        | 20,000              | 20,000         | 20,000           |
| 50k - 1L           | C        | 10,000              | 10,000         | 10,000           |
| 1 - 1.5L           | C        | 12,000              | 12,000         | 12,000           |
| >1.5L              | C        | 15,000              | 15,000         | 15,000           |
| 50k - 1L           | D        | 8,000               | 8,000          | 8,000            |
| 1 - 1.5L           | D        | 8,000               | 8,000          | 8,000            |
| >1.5L              | D        | 10,000              | 10,000         | 10,000           |

Would you like me to generate this as a CSV or JSON file for easier use?




Here’s your data structured in a tabular format:

| App Score Range | Bureau Score Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|----------------|--------------------|----------|---------------------|----------------|-------------------|
| 650 - 679     | -                  | A        | 25,000              | 10,000         | 25,000           |
| 680 - 700     | -                  | A        | 35,000              | 14,000         | 35,000           |
| 701 - 724     | -                  | A        | 50,000              | 20,000         | 50,000           |
| 725 - 749     | -                  | A        | 75,000              | 37,500         | 75,000           |
| 750 - 800     | -                  | A        | 75,000              | 60,000         | 75,000           |
| > 800         | -                  | A        | 90,000              | -              | -                |
| 650 - 679     | -                  | B        | 25,000              | 10,000         | 25,000           |
| 680 - 700     | -                  | B        | 35,000              | 14,000         | 35,000           |
| 701 - 724     | -                  | B        | 50,000              | 20,000         | 50,000           |
| 725 - 740     | -                  | B        | 50,000              | 25,000         | 50,000           |
| 750 - 800     | -                  | B        | 75,000              | 60,000         | 75,000           |
| > 800         | -                  | B        | 75,000              | 67,500         | 75,000           |
| 650 - 725     | -                  | C        | 25,000              | 10,000         | 25,000           |
| 725 - 749     | -                  | C        | 25,000              | 10,000         | 25,000           |
| 750 - 779     | -                  | C        | 50,000              | 25,000         | 50,000           |
| 780 - 800     | -                  | C        | 50,000              | 30,000         | 50,000           |
| > 800         | -                  | C        | 50,000              | 30,000         | 50,000           |
| 650 - 725     | -                  | D        | 25,000              | 10,000         | 25,000           |
| 725 - 779     | -                  | D        | 25,000              | 10,000         | 25,000           |
| 780 - 800     | -                  | D        | 35,000              | 14,000         | 35,000           |
| > 800         | -                  | D        | 35,000              | 17,500         | 35,000           |

Would you like me to generate this as a CSV or JSON file for easy use in Python?

Here’s the updated table with the "Bureau Score Range" column:  

| Bureau Score Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|--------------------|----------|---------------------|----------------|-------------------|
| 650 - 679         | A        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | A        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | A        | 50,000              | 20,000         | 50,000           |
| 725 - 749         | A        | 75,000              | 37,500         | 75,000           |
| 750 - 800         | A        | 75,000              | 60,000         | 75,000           |
| > 800            | A        | 90,000              | -              | -                |
| 650 - 679         | B        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | B        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | B        | 50,000              | 20,000         | 50,000           |
| 725 - 740         | B        | 50,000              | 25,000         | 50,000           |
| 750 - 800         | B        | 75,000              | 60,000         | 75,000           |
| > 800            | B        | 75,000              | 67,500         | 75,000           |
| 650 - 725         | C        | 25,000              | 10,000         | 25,000           |
| 725 - 749         | C        | 25,000              | 10,000         | 25,000           |
| 750 - 779         | C        | 50,000              | 25,000         | 50,000           |
| 780 - 800         | C        | 50,000              | 30,000         | 50,000           |
| > 800            | C        | 50,000              | 30,000         | 50,000           |
| 650 - 725         | D        | 25,000              | 10,000         | 25,000           |
| 725 - 779         | D        | 25,000              | 10,000         | 25,000           |
| 780 - 800         | D        | 35,000              | 14,000         | 35,000           |
| > 800            | D        | 35,000              | 17,500         | 35,000           |

Would you like this as a CSV or JSON file for Python?





Here’s your structured table:

| Bureau Score Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|--------------------|----------|---------------------|----------------|-------------------|
| 650 - 679         | A        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | A        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | A        | 35,000              | 14,000         | 35,000           |
| 725 - 749         | A        | 50,000              | 25,000         | 50,000           |
| 750 - 800         | A        | 50,000              | 40,000         | 50,000           |
| > 800            | A        | 75,000              | 67,500         | 75,000           |
| 650 - 679         | B        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | B        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | B        | 35,000              | 14,000         | 35,000           |
| 725 - 749         | B        | 50,000              | 25,000         | 50,000           |
| 750 - 800         | B        | 50,000              | 40,000         | 50,000           |
| > 800            | B        | 75,000              | 67,500         | 75,000           |
| 650 - 725         | C        | 25,000              | 10,000         | 25,000           |
| 725 - 749         | C        | 25,000              | 10,000         | 25,000           |
| 750 - 779         | C        | 35,000              | 17,500         | 35,000           |
| 780 - 800         | C        | 35,000              | 21,000         | 35,000           |
| > 800            | C        | 50,000              | 30,000         | 50,000           |
| 650 - 725         | D        | 25,000              | 10,000         | 25,000           |
| 725 - 779         | D        | 25,000              | 10,000         | 25,000           |
| 780 - 800         | D        | 35,000              | 14,000         | 35,000           |
| > 800            | D        | 35,000              | 17,500         | 35,000           |

Would you like me to generate a CSV or JSON file for this data?













To track all changes made to a PDF since its creation, you can analyze:

1. Metadata Changes – Check timestamps like creation, modification, and version history.


2. Incremental Updates – PDFs can store changes in incremental updates, preserving original content.


3. Content Differences – Compare text, images, and annotations between different versions of the PDF.


4. Digital Signatures & Revisions – Some PDFs store revision history using digital signatures.




---

1. Check Metadata for Modification Timestamps

Use PyMuPDF to extract creation and modification timestamps:

import fitz

def get_metadata(pdf_path):
    doc = fitz.open(pdf_path)
    metadata = doc.metadata
    print(f"Creation Date: {metadata.get('creationDate', 'Unknown')}")
    print(f"Modification Date: {metadata.get('modDate', 'Unknown')}")
    return metadata

get_metadata("sample.pdf")

✅ If modDate is later than creationDate, the PDF was modified.


---

2. Detect Incremental Updates (Check If Changes Were Made)

PDFs can be edited incrementally, preserving older versions. Use pypdf:

from pypdf import PdfReader

def check_incremental_updates(pdf_path):
    reader = PdfReader(pdf_path)
    if reader.trailer.get("/Prev"):
        print("PDF has incremental updates (edited after creation).")
        return True
    print("No incremental updates detected.")
    return False

check_incremental_updates("sample.pdf")

✅ If /Prev exists in the trailer, it means changes were made without modifying the original PDF.


---

3. Compare Content Between Revisions

If you have an older version of the PDF, you can compare the text:

import pdfplumber

def extract_text(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text

old_text = extract_text("original.pdf")
new_text = extract_text("edited.pdf")

if old_text == new_text:
    print("No content changes detected.")
else:
    print("Changes detected in text!")

✅ This helps if you have both original and modified versions.


---

4. Extract Digital Signatures & Revisions

If the PDF has digital signatures, they might indicate revisions:

from pypdf import PdfReader

def check_signatures(pdf_path):
    reader = PdfReader(pdf_path)
    sigs = [field for field in reader.root.get("/AcroForm", {}).get("/Fields", []) if "/Sig" in field.get_object()]
    if sigs:
        print(f"PDF has {len(sigs)} digital signatures. Possible revision history exists.")
        return True
    print("No digital signatures found.")
    return False

check_signatures("signed.pdf")

✅ If multiple digital signatures exist, they likely indicate multiple revisions.


---

5. Compare Images Between Versions

If changes include images, extract them and compare:

import fitz

def extract_images(pdf_path):
    doc = fitz.open(pdf_path)
    images = []
    for page in doc:
        for img in page.get_images(full=True):
            images.append(img[0])  # Image index
    return set(images)

old_images = extract_images("original.pdf")
new_images = extract_images("edited.pdf")

if old_images != new_images:
    print("Changes detected in images!")

✅ This helps if images were added, removed, or modified.


---

Final Workflow

1. Check metadata (creation/modification dates).


2. Look for incremental updates (detect if changes were appended).


3. Compare text content (if an original version is available).


4. Check for digital signatures (signatures indicate official changes).


5. Compare images (detect visual changes).




---

Would you like me to create a unified script that performs all these checks at once?
















Here is a single script that extracts and compares text, images, and annotations from a PDF to detect all changes made since its creation.

Features

✅ Detects incremental updates (if the PDF was modified after creation).
✅ Extracts previous versions from the PDF.
✅ Compares text (added, removed, or modified content).
✅ Detects image changes (added or removed images).
✅ Identifies annotation changes (comments, highlights, etc.).


---

📜 Full Script

import os
import fitz  # PyMuPDF
import pdfplumber
from pypdf import PdfReader

def check_incremental_updates(pdf_path):
    """Check if the PDF has incremental updates (modified after creation)."""
    reader = PdfReader(pdf_path)
    if reader.trailer.get("/Prev"):
        print(f"[INFO] PDF has incremental updates.")
        return True
    print("[INFO] No incremental updates detected.")
    return False

def extract_old_versions(pdf_path):
    """Extracts previous versions of the PDF (if incremental updates exist)."""
    with open(pdf_path, "rb") as f:
        data = f.read()

    versions = data.split(b"%%EOF")  # Split at EOF markers
    version_paths = []

    if len(versions) > 2:  # More than one version exists
        for i, version in enumerate(versions[:-1], start=1):
            version_path = f"version_{i}.pdf"
            with open(version_path, "wb") as f:
                f.write(version + b"%%EOF")
            version_paths.append(version_path)
            print(f"[INFO] Extracted previous version: {version_path}")

    if version_paths:
        return version_paths[0]  # Return the first version (original)
    return None

def extract_text(pdf_path):
    """Extracts text content from a PDF."""
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"
    return text

def extract_images(pdf_path):
    """Extracts image hashes from a PDF."""
    doc = fitz.open(pdf_path)
    images = set()
    for page in doc:
        for img in page.get_images(full=True):
            images.add(img[0])  # Image index
    return images

def extract_annotations(pdf_path):
    """Extracts annotations (comments, highlights) from a PDF."""
    doc = fitz.open(pdf_path)
    annotations = []
    for page in doc:
        for annot in page.annots():
            annotations.append(annot.info)
    return annotations

def compare_pdfs(original_pdf, modified_pdf):
    """Compares original and modified PDFs for text, image, and annotation changes."""
    original_text = extract_text(original_pdf)
    modified_text = extract_text(modified_pdf)

    if original_text != modified_text:
        print("\n🔹 [CHANGE DETECTED] Text modifications found!")
        print("\n--- Original Text (First 500 chars) ---\n", original_text[:500])
        print("\n--- Modified Text (First 500 chars) ---\n", modified_text[:500])

    original_images = extract_images(original_pdf)
    modified_images = extract_images(modified_pdf)

    added_images = modified_images - original_images
    removed_images = original_images - modified_images

    if added_images:
        print(f"\n🔹 [CHANGE DETECTED] New images added: {added_images}")
    if removed_images:
        print(f"\n🔹 [CHANGE DETECTED] Images removed: {removed_images}")

    original_annotations = extract_annotations(original_pdf)
    modified_annotations = extract_annotations(modified_pdf)

    if original_annotations != modified_annotations:
        print("\n🔹 [CHANGE DETECTED] Annotations modified!")

def analyze_pdf_changes(pdf_path):
    """Main function to analyze changes in a PDF."""
    print(f"\n🔍 Analyzing changes in: {pdf_path}\n")

    if check_incremental_updates(pdf_path):
        original_version = extract_old_versions(pdf_path)

        if original_version:
            print("\n🔄 Comparing extracted original version with modified version...\n")
            compare_pdfs(original_version, pdf_path)
        else:
            print("\n⚠️ Could not extract original version. Manual comparison needed.")
    else:
        print("\n✅ No modifications detected.")

# Run the script with a sample PDF
pdf_file = "sample.pdf"  # Replace with your PDF file path
analyze_pdf_changes(pdf_file)


---

🔹 How It Works

1. Checks for incremental updates using /Prev in the PDF structure.


2. Extracts the original version if changes were made.


3. Compares original and modified versions for changes in:

Text content (modified or removed text).

Images (added or removed images).

Annotations (comments, highlights, etc.).





---

✅ Example Output

🔍 Analyzing changes in: sample.pdf

[INFO] PDF has incremental updates.
[INFO] Extracted previous version: version_1.pdf

🔄 Comparing extracted original version with modified version...

🔹 [CHANGE DETECTED] Text modifications found!

--- Original Text (First 500 chars) ---
"Original text content here..."

--- Modified Text (First 500 chars) ---
"Modified text content here..."

🔹 [CHANGE DETECTED] New images added: {3, 5}
🔹 [CHANGE DETECTED] Images removed: {1}
🔹 [CHANGE DETECTED] Annotations modified!


---

📌 Notes

This script extracts changes only if the PDF was incrementally updated (not fully overwritten).

If the original version isn't extractable, manual comparison is required.

Works well for text-heavy PDFs and documents with incremental changes (like contracts, invoices, etc.).


Would you like additional PDF change tracking features, such as highlighting added/removed text?




