Here’s your data in a structured tabular format:  

| Sanction Amount Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|----------------------|----------|---------------------|----------------|-------------------|
| 50k - 1L           | A        | 40,000              | 20,000         | 40,000           |
| 1 - 1.5L           | A        | 45,000              | 22,000         | 45,000           |
| >1.5L              | A        | 50,000              | 25,000         | 50,000           |
| 50k - 1L           | B        | 30,000              | 15,000         | 30,000           |
| 1 - 1.5L           | B        | 35,000              | 18,000         | 35,000           |
| >1.5L              | B        | 40,000              | 20,000         | 40,000           |
| 50k - 1L           | C        | 20,000              | 10,000         | 20,000           |
| 1 - 1.5L           | C        | 25,000              | 12,000         | 25,000           |
| >1.5L              | C        | 30,000              | 15,000         | 30,000           |
| 50k - 1L           | D        | 15,000              | 8,000          | 15,000           |
| 1 - 1.5L           | D        | 15,000              | 8,000          | 15,000           |
| >1.5L              | D        | 20,000              | 10,000         | 20,000           |

Would you like this in CSV or JSON format for easier use in a program?


def get_eligibility(category, sanction_amount):
    # Eligibility dataset
    eligibility_data = [
        {"Sanction Amount Range": "50k - 1L", "Category": "A", "Overall Eligibility": 40000, "OTC-Eligibility": 20000, "Non-OTC Eligibility": 40000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "A", "Overall Eligibility": 45000, "OTC-Eligibility": 22000, "Non-OTC Eligibility": 45000},
        {"Sanction Amount Range": ">1.5L", "Category": "A", "Overall Eligibility": 50000, "OTC-Eligibility": 25000, "Non-OTC Eligibility": 50000},
        {"Sanction Amount Range": "50k - 1L", "Category": "B", "Overall Eligibility": 30000, "OTC-Eligibility": 15000, "Non-OTC Eligibility": 30000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "B", "Overall Eligibility": 35000, "OTC-Eligibility": 18000, "Non-OTC Eligibility": 35000},
        {"Sanction Amount Range": ">1.5L", "Category": "B", "Overall Eligibility": 40000, "OTC-Eligibility": 20000, "Non-OTC Eligibility": 40000},
        {"Sanction Amount Range": "50k - 1L", "Category": "C", "Overall Eligibility": 20000, "OTC-Eligibility": 10000, "Non-OTC Eligibility": 20000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "C", "Overall Eligibility": 25000, "OTC-Eligibility": 12000, "Non-OTC Eligibility": 25000},
        {"Sanction Amount Range": ">1.5L", "Category": "C", "Overall Eligibility": 30000, "OTC-Eligibility": 15000, "Non-OTC Eligibility": 30000},
        {"Sanction Amount Range": "50k - 1L", "Category": "D", "Overall Eligibility": 15000, "OTC-Eligibility": 8000, "Non-OTC Eligibility": 15000},
        {"Sanction Amount Range": "1 - 1.5L", "Category": "D", "Overall Eligibility": 15000, "OTC-Eligibility": 8000, "Non-OTC Eligibility": 15000},
        {"Sanction Amount Range": ">1.5L", "Category": "D", "Overall Eligibility": 20000, "OTC-Eligibility": 10000, "Non-OTC Eligibility": 20000},
    ]

    # Determine the sanction amount range
    if 50000 <= sanction_amount <= 100000:
        sa_range = "50k - 1L"
    elif 100001 <= sanction_amount <= 150000:
        sa_range = "1 - 1.5L"
    else:
        sa_range = ">1.5L"

    # Find the matching entry
    for entry in eligibility_data:
        if entry["Category"] == category and entry["Sanction Amount Range"] == sa_range:
            return entry

    return None  # Return None if no match found

# Example usage
category = "B"
sanction_amount = 130000
eligibility = get_eligibility(category, sanction_amount)

if eligibility:
    print("Eligibility Details:", eligibility)
else:
    print("No matching eligibility found.")






Here’s your data in a structured tabular format:

| Sanction Amount Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|----------------------|----------|---------------------|----------------|-------------------|
| 50k - 1L           | A        | 20,000              | 20,000         | 20,000           |
| 1 - 1.5L           | A        | 22,000              | 22,000         | 22,000           |
| >1.5L              | A        | 25,000              | 25,000         | 25,000           |
| 50k - 1L           | B        | 15,000              | 15,000         | 15,000           |
| 1 - 1.5L           | B        | 18,000              | 18,000         | 18,000           |
| >1.5L              | B        | 20,000              | 20,000         | 20,000           |
| 50k - 1L           | C        | 10,000              | 10,000         | 10,000           |
| 1 - 1.5L           | C        | 12,000              | 12,000         | 12,000           |
| >1.5L              | C        | 15,000              | 15,000         | 15,000           |
| 50k - 1L           | D        | 8,000               | 8,000          | 8,000            |
| 1 - 1.5L           | D        | 8,000               | 8,000          | 8,000            |
| >1.5L              | D        | 10,000              | 10,000         | 10,000           |

Would you like me to generate this as a CSV or JSON file for easier use?




Here’s your data structured in a tabular format:

| App Score Range | Bureau Score Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|----------------|--------------------|----------|---------------------|----------------|-------------------|
| 650 - 679     | -                  | A        | 25,000              | 10,000         | 25,000           |
| 680 - 700     | -                  | A        | 35,000              | 14,000         | 35,000           |
| 701 - 724     | -                  | A        | 50,000              | 20,000         | 50,000           |
| 725 - 749     | -                  | A        | 75,000              | 37,500         | 75,000           |
| 750 - 800     | -                  | A        | 75,000              | 60,000         | 75,000           |
| > 800         | -                  | A        | 90,000              | -              | -                |
| 650 - 679     | -                  | B        | 25,000              | 10,000         | 25,000           |
| 680 - 700     | -                  | B        | 35,000              | 14,000         | 35,000           |
| 701 - 724     | -                  | B        | 50,000              | 20,000         | 50,000           |
| 725 - 740     | -                  | B        | 50,000              | 25,000         | 50,000           |
| 750 - 800     | -                  | B        | 75,000              | 60,000         | 75,000           |
| > 800         | -                  | B        | 75,000              | 67,500         | 75,000           |
| 650 - 725     | -                  | C        | 25,000              | 10,000         | 25,000           |
| 725 - 749     | -                  | C        | 25,000              | 10,000         | 25,000           |
| 750 - 779     | -                  | C        | 50,000              | 25,000         | 50,000           |
| 780 - 800     | -                  | C        | 50,000              | 30,000         | 50,000           |
| > 800         | -                  | C        | 50,000              | 30,000         | 50,000           |
| 650 - 725     | -                  | D        | 25,000              | 10,000         | 25,000           |
| 725 - 779     | -                  | D        | 25,000              | 10,000         | 25,000           |
| 780 - 800     | -                  | D        | 35,000              | 14,000         | 35,000           |
| > 800         | -                  | D        | 35,000              | 17,500         | 35,000           |

Would you like me to generate this as a CSV or JSON file for easy use in Python?

Here’s the updated table with the "Bureau Score Range" column:  

| Bureau Score Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|--------------------|----------|---------------------|----------------|-------------------|
| 650 - 679         | A        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | A        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | A        | 50,000              | 20,000         | 50,000           |
| 725 - 749         | A        | 75,000              | 37,500         | 75,000           |
| 750 - 800         | A        | 75,000              | 60,000         | 75,000           |
| > 800            | A        | 90,000              | -              | -                |
| 650 - 679         | B        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | B        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | B        | 50,000              | 20,000         | 50,000           |
| 725 - 740         | B        | 50,000              | 25,000         | 50,000           |
| 750 - 800         | B        | 75,000              | 60,000         | 75,000           |
| > 800            | B        | 75,000              | 67,500         | 75,000           |
| 650 - 725         | C        | 25,000              | 10,000         | 25,000           |
| 725 - 749         | C        | 25,000              | 10,000         | 25,000           |
| 750 - 779         | C        | 50,000              | 25,000         | 50,000           |
| 780 - 800         | C        | 50,000              | 30,000         | 50,000           |
| > 800            | C        | 50,000              | 30,000         | 50,000           |
| 650 - 725         | D        | 25,000              | 10,000         | 25,000           |
| 725 - 779         | D        | 25,000              | 10,000         | 25,000           |
| 780 - 800         | D        | 35,000              | 14,000         | 35,000           |
| > 800            | D        | 35,000              | 17,500         | 35,000           |

Would you like this as a CSV or JSON file for Python?





Here’s your structured table:

| Bureau Score Range | Category | Overall Eligibility | OTC-Eligibility | Non-OTC Eligibility |
|--------------------|----------|---------------------|----------------|-------------------|
| 650 - 679         | A        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | A        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | A        | 35,000              | 14,000         | 35,000           |
| 725 - 749         | A        | 50,000              | 25,000         | 50,000           |
| 750 - 800         | A        | 50,000              | 40,000         | 50,000           |
| > 800            | A        | 75,000              | 67,500         | 75,000           |
| 650 - 679         | B        | 25,000              | 10,000         | 25,000           |
| 680 - 700         | B        | 35,000              | 14,000         | 35,000           |
| 701 - 724         | B        | 35,000              | 14,000         | 35,000           |
| 725 - 749         | B        | 50,000              | 25,000         | 50,000           |
| 750 - 800         | B        | 50,000              | 40,000         | 50,000           |
| > 800            | B        | 75,000              | 67,500         | 75,000           |
| 650 - 725         | C        | 25,000              | 10,000         | 25,000           |
| 725 - 749         | C        | 25,000              | 10,000         | 25,000           |
| 750 - 779         | C        | 35,000              | 17,500         | 35,000           |
| 780 - 800         | C        | 35,000              | 21,000         | 35,000           |
| > 800            | C        | 50,000              | 30,000         | 50,000           |
| 650 - 725         | D        | 25,000              | 10,000         | 25,000           |
| 725 - 779         | D        | 25,000              | 10,000         | 25,000           |
| 780 - 800         | D        | 35,000              | 14,000         | 35,000           |
| > 800            | D        | 35,000              | 17,500         | 35,000           |

Would you like me to generate a CSV or JSON file for this data?













To track all changes made to a PDF since its creation, you can analyze:

1. Metadata Changes – Check timestamps like creation, modification, and version history.


2. Incremental Updates – PDFs can store changes in incremental updates, preserving original content.


3. Content Differences – Compare text, images, and annotations between different versions of the PDF.


4. Digital Signatures & Revisions – Some PDFs store revision history using digital signatures.




---

1. Check Metadata for Modification Timestamps

Use PyMuPDF to extract creation and modification timestamps:

import fitz

def get_metadata(pdf_path):
    doc = fitz.open(pdf_path)
    metadata = doc.metadata
    print(f"Creation Date: {metadata.get('creationDate', 'Unknown')}")
    print(f"Modification Date: {metadata.get('modDate', 'Unknown')}")
    return metadata

get_metadata("sample.pdf")

✅ If modDate is later than creationDate, the PDF was modified.


---

2. Detect Incremental Updates (Check If Changes Were Made)

PDFs can be edited incrementally, preserving older versions. Use pypdf:

from pypdf import PdfReader

def check_incremental_updates(pdf_path):
    reader = PdfReader(pdf_path)
    if reader.trailer.get("/Prev"):
        print("PDF has incremental updates (edited after creation).")
        return True
    print("No incremental updates detected.")
    return False

check_incremental_updates("sample.pdf")

✅ If /Prev exists in the trailer, it means changes were made without modifying the original PDF.


---

3. Compare Content Between Revisions

If you have an older version of the PDF, you can compare the text:

import pdfplumber

def extract_text(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text

old_text = extract_text("original.pdf")
new_text = extract_text("edited.pdf")

if old_text == new_text:
    print("No content changes detected.")
else:
    print("Changes detected in text!")

✅ This helps if you have both original and modified versions.


---

4. Extract Digital Signatures & Revisions

If the PDF has digital signatures, they might indicate revisions:

from pypdf import PdfReader

def check_signatures(pdf_path):
    reader = PdfReader(pdf_path)
    sigs = [field for field in reader.root.get("/AcroForm", {}).get("/Fields", []) if "/Sig" in field.get_object()]
    if sigs:
        print(f"PDF has {len(sigs)} digital signatures. Possible revision history exists.")
        return True
    print("No digital signatures found.")
    return False

check_signatures("signed.pdf")

✅ If multiple digital signatures exist, they likely indicate multiple revisions.


---

5. Compare Images Between Versions

If changes include images, extract them and compare:

import fitz

def extract_images(pdf_path):
    doc = fitz.open(pdf_path)
    images = []
    for page in doc:
        for img in page.get_images(full=True):
            images.append(img[0])  # Image index
    return set(images)

old_images = extract_images("original.pdf")
new_images = extract_images("edited.pdf")

if old_images != new_images:
    print("Changes detected in images!")

✅ This helps if images were added, removed, or modified.


---

Final Workflow

1. Check metadata (creation/modification dates).


2. Look for incremental updates (detect if changes were appended).


3. Compare text content (if an original version is available).


4. Check for digital signatures (signatures indicate official changes).


5. Compare images (detect visual changes).




---

Would you like me to create a unified script that performs all these checks at once?





